################################################################################
# Name:		delete_pcluster.yml
# Author:	Rodney Marable <rodney.marable@gmail.com>
# Created On:	February 20, 2019
# Last Changed:	June 27, 2019
# Purpose:	Ansible playbook to delete ParallelCluster stacks
################################################################################

---

- name: Delete an existing ParallelCluster stack
  hosts: local
  connection: local
  gather_facts: false
  vars:
    - local_homedir: "{{ lookup('env','HOME') }}"
    - local_workingdir: "{{ lookup('pipe','pwd') }}"
  vars_files:
    - vars_files/{{ cluster_name }}.yml

  tasks:
    - name: Start a timer for the cluster deletion process
      command: date +%Y-%m-%d\ \@\ %H:%M:%S
      register: start_delete_timer

    - debug:
         msg:
          - ""
          - "================================================================="
          - "Destroying: {{ cluster_name }} in {{ az }},"
          - "Start Time: {{ start_delete_timer.stdout }}"
          - ""
          - "This process will take about 5 minutes to complete..."
          - "================================================================="
          - ""

    - name: Delete the ParallelCluster stack
      command: pcluster delete --config {{ cluster_config_template }} --region {{ region }} {{ cluster_name }}
      ignore_errors: yes

    - name: Start a timer for the cluster self-terminating Lambda function
      command: date +%Y-%m-%d\ \@\ %H:%M:%S
      register: start_delete_lambda_timer

    - debug:
         msg:
          - "================================================================="
          - "Removing:   terminate_pcluster function for {{ cluster_name }},"
          - "Start Time: {{ start_delete_lambda_timer.stdout }}"
          - ""
          - "This process will take less than 5 minutes to complete..."
          - "================================================================="
          - ""

    - name: Delete the cluster self-terminating Lambda function stage directory 
      serverless:
        service_path: "{{ serverless_stage_dir }}"
        state: absent
      ignore_errors: yes
      when: 'debug_mode == "false"'

    - name: Delete the cluster self-terminating Lambda function stage directory with verbose mode engaged
      serverless:
        service_path: "{{ serverless_stage_dir }}"
        state: absent
        verbose: True
      ignore_errors: yes
      when: 'debug_mode == "true"'

    - name: Stop the terminate_cluster Lambda function timer
      command: date +%Y-%m-%d\ \@\ %H:%M:%S
      register: stop_delete_lambda_timer

    - name: Delete the EC2 keypair associated with this cluster
      ec2_key:
        name: "{{ ec2_keypair }}"
        region: "{{ region }}"        
        state: absent
      register: ec2_private_key

    - name: Delete the SSH private key associated with this cluster
      file:
        path: "{{ ssh_keypair }}"
        state: absent
      when: ec2_private_key.changed

    - name: Remove all custom qsub and sbatch performance templates from the src tree
      file:
        path: "{{ item }}"
        state: absent
      with_fileglob:
        - "{{ performance_template_dir }}/sbatch-*.j2"
        - "{{ performance_template_dir }}/qsub-*.j2"
      ignore_errors: yes

    - name: Delete the S3 bucket associated with this cluster
      s3_bucket:
        name: "{{ s3_bucketname }}"
        region: "{{ region }}"
        state: absent
        force: yes
      ignore_errors: yes
      when: 'delete_s3_bucketname == "true"'

    - name: Stop the timer and record how long the cluster took to destroy
      command: date +%Y-%m-%d\ \@\ %H:%M:%S
      register: stop_delete_timer

    - name: Check for the existence of cluster_data_dir
      stat: path="{{ cluster_data_dir }}"
      register: isdir_cdd

    - name: Template the cluster destruction summary report to be sent via SNS
      template:
        src: "{{ sns_destruction_summary_report_src }}"
        dest: "{{ sns_destruction_summary_report_dest }}"
        mode: 0755
      when: isdir_cdd.stat.isdir is defined and isdir_cdd.stat.isdir

    - name: Distribute the cluster destruction summary report via SNS
      sns:
        msg: "{{ lookup('file', '{{ sns_destruction_summary_report_dest }}') }}"
        subject: "Cluster Destruction Notice: {{ cluster_name }}"
        topic: sns_alerts_{{ cluster_name }}
        region: "{{ region }}"
      ignore_errors: yes
      delegate_to: localhost
      when: isdir_cdd.stat.isdir is defined and isdir_cdd.stat.isdir

    - name: Delete the SNS topic associated with this cluster
      sns_topic:
        name: "sns_alerts_{{ cluster_name }}"
        region: "{{ region }}"
        state: absent
        subscriptions:
          - endpoint: "{{ cluster_owner_email }}"
            protocol: "email"
      ignore_errors: yes
      when: isdir_cdd.stat.isdir is defined and isdir_cdd.stat.isdir

    - name: Delete the IAM policies associated with the cluster stack
      iam_policy:
        iam_type: role
        iam_name: "{{ item.role }}"
        policy_name: "{{ item.policy }}"
        region: "{{ region }}"
        state: absent
      with_items:
        - { role: '{{ ec2_iam_role }}', policy: '{{ ec2_iam_policy }}' }
        - { role: '{{ serverless_ec2_iam_role }}', policy: '{{ serverless_ec2_iam_policy }}' }
      ignore_errors: yes

    - name: Delete the IAM roles associated with the cluster stack and kill-pcluster Lambda function
      iam:
        name: "{{ item }}"
        iam_type: role
        region: "{{ region }}"
        state: absent
      with_items:
        - "{{ ec2_iam_role }}"
        - "{{ serverless_ec2_iam_role }}"
      ignore_errors: yes

    - block:
      - name: Delete the IAM policy associated with Lustre-S3 hydration
        iam_policy:
          iam_type: role
          iam_name: "{{ fsx_hydration_iam_role }}"
          policy_name: "{{ fsx_hydration_iam_policy }}"
          region: "{{ region }}"
          state: absent
        ignore_errors: yes
      - name: Delete the IAM role associated with Lustre-S3 hydration
        iam:
          name: "{{ fsx_hydration_iam_role }}"
          iam_type: role
          region: "{{ region }}"
          state: absent
        ignore_errors: yes
      when: enable_fsx_hydration is defined and enable_fsx_hydration == "true"

    - name: Delete the cluster data directory
      file:
        path: "{{ cluster_data_dir }}"
        state: absent
      when: isdir_cdd.stat.isdir is defined and isdir_cdd.stat.isdir

    - debug:
         msg:
          - "================================================================="
          - ""
          - "Initiated shutdown of {{ cluster_name }} on {{ start_delete_timer.stdout }}"
          - "Completed shutdown of {{ cluster_name }} on {{ stop_delete_timer.stdout }}"
          - ""
          - "================================================================="
